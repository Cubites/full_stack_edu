* useState에 배열을 넣은 경우
- 잘못된 예
const [arr, setArr] = useState([1, 2, 3]); 
> setArr([1, 2, 3, 4]) 
>> 에러, 배열은 주소값을 기준으로 값을 받아오므로, 새로운 배열의 주소가 아닌 기존 배열의 주소를 받아오게 되어 값이 변하지 않음

- 올바른 예
let arr = [1, 2, 3];
const [arr, setArr] = useState([1, 2, 3]); 
(
    arr.push('4');
    let newArr = arr;
    setArr(newArr);
)
>> 새로운 배열에 변경한 값을 넣고, 새로운 배열을 함수에 넣어야 값이 수정됨


* useState, useEffect
- useEffect: 렌더링 (두번째 객체(배열)를 이용/ 없을 때, [set]일 때, []일 때)

* useRef
const [ase, setAse] = useState('aa');

const ref = useRef(value);
ref = {current : value} >> 출력값이 배열임
- 인자로 넣은 초기값이 current에 저장되어 ref의 오브젝트로 반환됨
- 컴포넌트가 언마운트 되기 전까지 계속 값을 유지 (*중요*)

State -> State값을 변경 -> 전체 함수가 렌더링 -> 컴포넌트 내부의 변수들은 모두 초기화

Ref -> Ref 변화 -> 렌더링이 일어나지 않음 -> 컴포넌트 내부의 변수들의 값이 유지됨
>> State로 렌더링이 발생해도 ref는 다시 읽어지지 않고 그대로 값이 유지됨

* useRef를 주로 사용하는 경우 >> dom 객체에 직접 접근할 때
- 예 : <input type="text"> 에 focus를 지정하려 할 때
