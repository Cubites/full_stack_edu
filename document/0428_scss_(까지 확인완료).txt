* scss 
- Syntactically Awesome Style Sheets
- 사용하려면 css로 변환하는 과정이 필요
	- 오리지널 Ruby Sass
	- node-sass 사용법
		- 설치 : npm install -g node-sass
		- node-sass style.scss -o >> 컴파일 한 현재 디렉토리에 저장
		- node-sass style.scss -w -o >> 파일에 변화가 있을 경우 자동으로 리컴파일
		- vscode 확장프로그램: Live Sass Compiler, Sass Lint (deprecated), Beautify css/sass/scss/less

* css와 scss의 주석처리
- css : /* 주석처리 */
- scss : /* 주석처리 */  or  // 주석처리

* scss의 변수
- 사용 예
$primary-color: #333;
** 변수를 선언할 때 전역적으로 설정해야 할 경우 !global 플래그를 사용
body{
    primary-color: #666 !global;
    background-color: $primary-color;
}
- 전역으로 사용할 때 = !global
- 해당 변수가 설정되지 않았거나 값이 null일 때 값을 설정 = !default

* scss의 Math Operators (연산자 사용)
- + - / * % == !=
- + - 연산자에서는 단위를 항상 통일시켜야 함 (기존에 있던 기능인 calc를 쓰면 가능하기 때문)
- $box-width: 100% / 20px;

* scss 내장함수
- darken(color, n%) : color 색을 n%만큼 어둡게
- 인터넷을 통해 sass builtin function을 검색하면 다양한 내장함수를 찾을 수 있음
- 색상관련 내장함수 사이트 참고 (jackiebalzer.com/color)

* 중첩(서열관계 중첩)
- css : .container{ } / .container h1{ } / .container p{ }
- scss : .container{ h1{ } p{ } } // a{ &:hover{ } &:active{ } }
	- .container{ @at-root .ul-list{ } } : @at-root 지시자는 container 클래스 밖에서도 ul-list 클래스를 사용할 수 있게 함

* import (불러오기)
- @import "grid.scss"; : @import를 이용하여 다른 scss를 불러올 수 있음
- @import "grid"; : 확장자를 생략하는 것도 가능

* 상속 (Extend)
.box{
    border: 1px solid #333;
    padding: 10px;
    display: inline-block;
}
.result-box{
    @extend .box;
    border: 1px solid red;
}

* Mixin (built in function)
@mixin borders ($color, $width, $style) {
    border-width: $width;
    border-color: $color;
    border-style: $style;
}
.box{
    @include borders(green, 2px, dashed);
}

* function
- mixin은 style markup을 반환하지만 function은 @return을 통해 값을 반환
@function percent-calc($target, $container){
    @return ($target / $container) * 100%;
}
.box{
     width: percentcalc(500px, 1200px);
}

* useContext() -> 불필요한 데이터 전달과정을 생략하고 필요한 곳에 바로 보냄, 컴포넌트를 재사용하기 어려울 수 있음